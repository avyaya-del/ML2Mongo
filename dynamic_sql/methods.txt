There are several approaches to converting SQL queries to MongoDB equivalents, each with their own strengths:

1. Using Libraries
The most robust solutions typically involve dedicated libraries:

- `sqlalchemy-mongodb`: A SQLAlchemy extension that provides SQL to MongoDB translation
- `pymongo`: While not a direct translator, it offers flexible querying capabilities
- `MongoEngine`: An Object-Document Mapper (ODM) that can help bridge SQL-like querying

2. Using Database Migration Tools
- `Mongoose`: Provides a Schema-based solution with query translation capabilities
- `Realm`: Offers translation mechanisms between different database query languages

3. Advanced Regex-based Conversion (Current Approach)
The current regex-based method has limitations:
- Fragile regex patterns
- Limited query complexity support
- Potential parsing errors
- No comprehensive type handling

4. Parsing Approach
A more robust method would involve:
- Using a proper SQL parser (like `sqlparse`)
- Creating an Abstract Syntax Tree (AST)
- Systematically translating each AST node to MongoDB equivalent

Here's a more advanced implementation demonstrating a more comprehensive approach:

```python
import sqlparse
import re

class SQLToMongoConverter:
    def __init__(self):
        self.operators_map = {
            '=': '$eq',
            '!=': '$ne',
            '>': '$gt',
            '>=': '$gte',
            '<': '$lt',
            '<=': '$lte',
            'LIKE': '$regex',
            'IN': '$in',
            'NOT IN': '$nin'
        }

    def convert_where_clause(self, where_clause):
        if not where_clause:
            return {}

        # More sophisticated where clause parsing
        conditions = {}
        
        # Basic parsing of simple conditions
        for condition in re.findall(r'(\w+)\s*(=|>|<|>=|<=|!=)\s*(["\']?.*?["\']?)\s*(AND|OR)?', where_clause):
            field, operator, value, logical_op = condition
            
            # Remove quotes if present
            value = value.strip("'\"")
            
            # Handle type conversion
            try:
                value = int(value)
            except ValueError:
                try:
                    value = float(value)
                except ValueError:
                    pass

            # Convert operator
            mongo_op = self.operators_map.get(operator, operator)
            
            if mongo_op == '$regex':
                # Handle LIKE with basic wildcard conversion
                value = value.replace('%', '.*')

            conditions[field] = {mongo_op: value}

        return conditions

    def convert_select(self, parsed_sql):
        # Extract key components from parsed SQL
        tables = [token.value for token in parsed_sql.tokens if isinstance(token, sqlparse.sql.Identifier) and token.ttype is None]
        
        # Handle projection
        select_tokens = [token for token in parsed_sql.tokens if isinstance(token, sqlparse.sql.IdentifierList)]
        projections = {}
        if select_tokens:
            for item in select_tokens[0].tokens:
                if isinstance(item, sqlparse.sql.Identifier):
                    projections[item.value] = 1

        # Handle WHERE clause
        where_clause = None
        for token in parsed_sql.tokens:
            if isinstance(token, sqlparse.sql.Where):
                where_clause = str(token).replace('WHERE', '').strip()

        # Construct MongoDB query
        query = {
            'collection': tables[0],
            'find_params': {
                'filter': self.convert_where_clause(where_clause) if where_clause else {},
                'projection': projections if projections else None
            }
        }

        return query

    def convert(self, sql_query):
        # Parse the SQL query
        parsed = sqlparse.parse(sql_query)[0]
        
        # Determine query type and convert
        if parsed.get_type() == 'SELECT':
            return self.convert_select(parsed)
        
        return None

# Example usage
converter = SQLToMongoConverter()

# Test queries
sql_queries = [
    'SELECT name, age FROM users WHERE age > 25 AND city = "New York"',
    'SELECT * FROM products WHERE price < 100',
    'SELECT username FROM accounts WHERE status LIKE "%active%"'
]

for query in sql_queries:
    mongo_equivalent = converter.convert(query)
    print(f"SQL: {query}")
    print(f"MongoDB: {mongo_equivalent}\n")

```

Key Advantages of this Approach:
1. Uses `sqlparse` for robust SQL parsing
2. Handles type conversion
3. Supports more complex operator translations
4. More flexible and extensible
5. Provides a structured approach to query conversion

Limitations to Consider:
- Not a complete replacement for manual query optimization
- Complex queries might require manual intervention
- Doesn't handle all possible SQL variations

Recommendation for Production:
1. For small to medium projects: Use this library-based approach
2. For large, complex systems: Consider:
   - Custom translation layer
   - Database abstraction frameworks
   - Potential schema redesign to leverage MongoDB's strengths

Would you like me to elaborate on any aspect of SQL to MongoDB query conversion?
